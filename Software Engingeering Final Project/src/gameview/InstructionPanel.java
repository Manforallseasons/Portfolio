/** *	@author Ariana Fairbanks */package gameview;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import javax.swing.JButton;import javax.swing.JCheckBox;import javax.swing.JFrame;import javax.swing.JTextArea;import javax.swing.border.LineBorder;import adapter.Controller;import java.awt.Dimension;import java.awt.GridBagLayout;import java.awt.GridBagConstraints;import java.awt.Insets;import java.awt.Color;public class InstructionPanel extends JFrame implements ActionListener, KeyListener{	private static final long serialVersionUID = -1571695469152471743L;	private final String fishInstructions  = "    Click on the fish that has the right answer to the math question on it. The game ends when time runs out or when the fish with the correct answer swims off screen.";	private final String jellyInstructions = "    Help the jellyfish choose the right treasure chest! The left and right arrow keys move him to the side while the up and down arrow keys make him faster or slower. The game ends when time runs out.";	private final String sharkInstructions = "    Use the arrow keys to help shark swim to the right answer. The game ends when time runs out.";	private Controller base;	private Game game;	private JTextArea content;	private JButton okayButton;	private JCheckBox showsEveryTime;	private String gameInstructionsString;	public InstructionPanel(Controller base, int gameNumber, boolean showEveryTime, Game game)	{		this.base = base;		this.game = game;		String title = "";		String contentString = "";				if(game != null)		{			game.stopTimers();		}				switch(gameNumber)		{			case 1:	title = "Fish";			gameInstructionsString = "game1Instructions";	contentString = fishInstructions;	break;			case 2:	title = "Jellyfish";	gameInstructionsString = "game2Instructions";	contentString = jellyInstructions;	break;			case 3:	title = "Shark";		gameInstructionsString = "game3Instructions";	contentString = sharkInstructions;	break;		}				setTitle(title + " Game Instructions");		setResizable(false);		setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);				GridBagLayout gridBagLayout = new GridBagLayout();		gridBagLayout.columnWidths = new int[]{50, 0, 0, 0, 50};		gridBagLayout.rowHeights = new int[]{250, 0, 23};		gridBagLayout.columnWeights = new double[]{0.0, 1.0, 0.0, 1.0, 0.0};		gridBagLayout.rowWeights = new double[]{0.0, 1.0, 1.0};		getContentPane().setLayout(gridBagLayout);		getContentPane().setBackground(new Color(208, 243, 255));				content = new JTextArea(contentString);		content.setEditable(false);		content.setWrapStyleWord(true);		content.setLineWrap(true);		content.setPreferredSize(new Dimension(400, 250));		content.setMinimumSize(new Dimension(400, 250));		content.setFont(new Font("Arial", Font.PLAIN, 26));		content.setForeground(new Color(70, 130, 180));		content.setBackground(new Color(208, 243, 255));				okayButton = new JButton(" OKAY ");		//okayButton.setForeground(new Color(70, 130, 180));		okayButton.setBackground(new Color(70, 130, 180));		okayButton.setBorder(new LineBorder(new Color(135, 206, 250), 2));		okayButton.setFocusPainted(false);		okayButton.setContentAreaFilled(false);		okayButton.setFont(new Font("Arial", Font.PLAIN, 18));		okayButton.addKeyListener(this);		okayButton.addActionListener(this);				showsEveryTime = new JCheckBox("Show Instructions Every Time");		showsEveryTime.setFocusPainted(false);		showsEveryTime.setContentAreaFilled(false);		showsEveryTime.setFont(new Font("Arial", Font.PLAIN, 12));		showsEveryTime.addKeyListener(this);		showsEveryTime.addActionListener(this);		showsEveryTime.requestFocus();		showsEveryTime.setSelected(showEveryTime);				GridBagConstraints gbc_content = new GridBagConstraints();		gbc_content.gridwidth = 5;		gbc_content.anchor = GridBagConstraints.NORTHEAST;		gbc_content.insets = new Insets(20, 25, 5, 20);		gbc_content.gridx = 0;		gbc_content.gridy = 0;				GridBagConstraints gbc_okayButton = new GridBagConstraints();		gbc_okayButton.insets = new Insets(0, 0, 10, 0);		gbc_okayButton.anchor = GridBagConstraints.NORTH;		gbc_okayButton.gridx = 2;		gbc_okayButton.gridy = 1;				GridBagConstraints gbc_showsEveryTime = new GridBagConstraints();		gbc_showsEveryTime.gridwidth = 5;		gbc_showsEveryTime.insets = new Insets(0, 10, 10, 10);		gbc_showsEveryTime.anchor = GridBagConstraints.NORTHWEST;		gbc_showsEveryTime.gridx = 0;		gbc_showsEveryTime.gridy = 2;				getContentPane().add(content, gbc_content);		getContentPane().add(okayButton, gbc_okayButton);		getContentPane().add(showsEveryTime, gbc_showsEveryTime);				pack();		setVisible(true);		okayButton.requestFocus();	}	@Override	public void actionPerformed(ActionEvent evt)	{		Object source = evt.getSource();		if(source == okayButton)		{				close();		}		else if(source == showsEveryTime)		{				base.setInstructionPreferences(gameInstructionsString, showsEveryTime.isSelected());		}	}	@Override	public void keyPressed(KeyEvent e)	{		if (e.getKeyCode() == KeyEvent.VK_ENTER)		{				close();		}	}		@Override	public void keyReleased(KeyEvent e){}		@Override	public void keyTyped(KeyEvent e){}		private void close()	{		if(game != null)		{				game.startTimers();			}		this.dispose();		}}